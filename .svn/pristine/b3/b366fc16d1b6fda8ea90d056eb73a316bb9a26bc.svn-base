using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Sockets;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Web.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Session;
using Newtonsoft.Json;
using System.Data;
using System.IO;
using System.Threading;
using Microsoft.AspNetCore.Http.Features;
using System.Text.RegularExpressions;
//using Microsoft.AspNetCore.Hosting.Internal;
using Newtonsoft.Json.Linq;
using System.Net.Http.Headers;
using System.IO.Compression;
using System.Net;

namespace Web.Controllers
{
    public class HomeController : Controller
    {
        [Obsolete]
        private readonly IHostingEnvironment _environment;

        // Constructor
        [Obsolete]
        public HomeController(IHostingEnvironment IHostingEnvironment)
        {
            _environment = IHostingEnvironment;
        }

        private void FillSystemDetails()
        {
            try
            {
                string Manufacturer = "";
                string Banner = "";
                string Logo = "";
                JsonController.FillSystemDetails(ref Manufacturer, ref Banner,ref Logo);
                ViewData["Manufacturer"] = Manufacturer;
            }
            catch (Exception)
            {
            }
        }

        public IActionResult Index()
        {
            try
            {
                //Common.FileEncrypt(FPath, PWD);
                // Common.FileDecrypt(FPath + ".aes", FPath + "1", PWD);
                string UserCheck = HttpContext.Session.GetString("ValidUser");
                if (UserCheck == null || UserCheck != "Valid")
                {
                    return RedirectToAction("Login", "Home");
                }
                FillSystemDetails();
                //string[] Data = new string[5];
                //HttpContext.Session.SetObjectAsJson("ArrayData", Data);
                //var ArrayData = HttpContext.Session.GetObjectFromJson<string[]>("ArrayData");
                ////string FilePath = System.Text.Encoding.ASCII.GetString(OutData);
                ////int kk = 0;
                ////return RedirectToAction()
                ////HttpContext.Session.SetString("Test", "Ben Rules!");
                //DataTable dt = new DataTable();
                //dt.Columns.Add("Test", typeof(string));
                //DataRow dr = dt.NewRow();
                //dr["Test"] = "Test";
                //dt.Rows.Add(dr);
                //HttpContext.Session.SetObjectAsJson("dt", dt);
                //var myComplexObject = HttpContext.Session.GetObjectFromJson<DataTable>("dt");
                //var httpConnectionFeature = HttpContext.Features.Get<IHttpConnectionFeature>();
                //TcpClient tcpclnt = new TcpClient();
                //Stream stm = null;
                //string Err = "";
                //HttpContext.Session.SetObjectAsJson("TcpClient", null);
                //HttpContext.Session.SetObjectAsJson("Stream", null);
                //if (TCP.Connect("192.168.8.85", port, ref tcpclnt, ref stm, ref Err))
                //{
                //    //HttpContext.Session.SetObjectAsJson("TcpClient", tcpclnt);
                //    HttpContext.Session.SetObjectAsJson("Stream", stm);
                //}
                //else
                //{
                //    HttpContext.Session.SetObjectAsJson("TcpClient", null);
                //    HttpContext.Session.SetObjectAsJson("Stream", null);
                //}
            }
            catch (Exception ex)
            {
                //int kk = 0;
                //string ss = ex.Message;
            }
            return View();
        }

        public DataTable ReadXML(string yourPath)
        {
            DataTable table = new DataTable("Item");
            try
            {
                DataSet lstNode = new DataSet();
                lstNode.ReadXml(yourPath);
                table = lstNode.Tables["table"];

                foreach (DataRow dr in table.Rows)
                {
                    dr["data"] = Common.RemoveWhiteSpace(dr["data"].ToString()).ToUpper();
                }

                return table;
            }
            catch (Exception ex)
            {
                return table;
            }
        }

        private string SendCommand(string IpAddress, int port, string Data)
        {
            string Result = "";
            try
            {
                //Data = "51AC032803";
                //Data = Common.TrackingCRCCalculate(Data);
                //Data = Common.GetTrackingCommand(Data);
                string Err = "";
                string ReadData = "";
                for (int i = 0; i < 3; i++)
                    UDP.ATC_Tracking(IpAddress, port, Data, ref ReadData, ref Err);
            }
            catch (Exception ex)
            {
                Result = ex.Message;
            }
            return Result;
        }



        public IActionResult Login()
        {
            try
            {
                FillSystemDetails();
                //string Err3 = "";
                //bool sa = false;
                //MiddleTyre_Mysql.GetSmartCamStatusDetails("Firmware_Update",ref sa, ref Err3);
                //string Result = "Failed";
                //try
                //{
                //    string DataIn = "Stablization_Off";
                //    string GetStabilization = Common.GetEnumToHex(Common.SLFIP.HeaderByte1);
                //    GetStabilization += Common.GetEnumToHex(Common.SLFIP.HeaderByte2);
                //    GetStabilization += "03";
                //    GetStabilization += Common.GetEnumToHex(Common.SLFIP.GetStabilizationParameters);
                //    GetStabilization += "00";

                //    GetStabilization = "51AC0328901C";//--CRC - 3C
                //    GetStabilization = "51AC032890";//--CRC - 3C
                //    GetStabilization = Common.TrackingCRCCalculate(GetStabilization);
                //    //if (Mode)
                //    //    DataIn = "Stablization_On";
                //    string IpAddress = "192.168.8.138";
                //    int port = 14001;
                //    //Result = SendCommand(IpAddress, port, GetStabilization);
                //}
                //catch (Exception ex)
                //{
                //    Result = "Zoom() : " + ex.Message;
                //}

                string Err = "";// Common.TrackingCRCCalculate("51AC033801");
                                //UdpClient client = new UdpClient();
                                //UDP.Connect("pythons", 5050, ref client, ref Err);
                                //var TimeZones = TimeZoneInfo.GetSystemTimeZones();
                                //UDP.ATC_TransmitData(client, "C701B6", ref Err);
                                //UDP.ATC_ReceiveData(client, ref Err, ref Err);
                                //string ss = "";
                                //MiddleTyre_Mysql.UpdateTemperatureDetails(ref ss);
                                //MiddleTyre_Mysql.Test(ref Err);
                                //ReadXML(@"C:\Users\Srinivas\Desktop\Cardinal1280B0_xml_V2_Generic.xml");
                HttpContext.Session.SetObjectAsJson("MotionRulesData", null);
                HttpContext.Session.SetString("SuperUser", "False");
                HttpContext.Session.SetString("CurrentSeverty", "All");
                HttpContext.Session.SetString("CurrentTimeZone", "");
                DataTable dt1 = null;
                if (MiddleTyre_Mysql.GetNetworkDetails(ref dt1, ref Err))
                {
                    if (dt1.Rows.Count > 0)
                    {
                        try
                        {
                            JsonController.IpAddress = dt1.Rows[0]["IPAddress"].ToString();
                        }
                        catch (Exception ex)
                        {
                        }
                    }
                }
                if (Common.EncryptFiles)
                {
                    DirectoryInfo info = new DirectoryInfo(Environment.CurrentDirectory + "//wwwroot//HTML_Temp");
                    FileInfo[] files = info.GetFiles("*.htm").OrderByDescending(p => p.CreationTime).ToArray();
                    foreach (FileInfo FI in files)
                    {
                        string FPath = FI.FullName.Replace("HTML_Temp", "HTML_Files");
                        Common.FileEncrypt(FI.FullName, FPath);
                    }
                    info = new DirectoryInfo(Environment.CurrentDirectory + "//wwwroot//HTML_Temp");
                    files = info.GetFiles("*.txt").OrderByDescending(p => p.CreationTime).ToArray();
                    foreach (FileInfo FI in files)
                    {
                        string FPath = FI.FullName.Replace("HTML_Temp", "HTML_Files");
                        Common.FileEncrypt(FI.FullName, FPath);
                    }
                }
                HttpContext.Session.SetString("ValidUser", "InValid");
            }
            catch (Exception ex)
            {
            }
            return View();
        }

        public IActionResult Configuration()
        {
            return View();
        }

        public IActionResult LiveViewer()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

        [HttpPost]
        public async Task<IActionResult> UploadFile(IFormFile file)
        {
            if (file == null || file.Length == 0)
                return Content("file not selected");

            var path = Path.Combine(
                        Directory.GetCurrentDirectory(), "wwwroot",
                        file.FileName);

            using (var stream = new FileStream(path, FileMode.Create))
            {
                await file.CopyToAsync(stream);
            }

            return RedirectToAction("Files");
        }

    }
}
